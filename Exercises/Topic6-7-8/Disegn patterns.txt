Caracteristicas patrones de diseño:

Singleton: es un patrón de diseño creacional que nos permite asegurarnos de que una clase tenga una única instancia, a la vez que proporciona un punto de acceso 
global a dicha instancia.
Ej: el motivo más habitual es controlar el acceso a algún recurso compartido, por ejemplo, una base de datos o un archivo.

Factory: es un patrón de diseño creacional que proporciona una interfaz para crear objetos en una superclase, mientras permite a las subclases alterar el tipo de
objetos que se crearán.
Ej: imagina una aplicación de gestión de Logística en la cual tienes la clase transporte de Camion de transporte terrestre, en un futuro la aplcación se vuelve
más robusta y debes agregar una clase Barco para transportes por mar. Para acoplar el código existente a una nueva clase utilizariamos este patrón.

Builder: es un patrón de diseño creacional que nos permite construir objetos complejos paso a paso. Nos permite producir distintos tipos y representaciones
de un objeto empleando el mismo código de construcción. Sugiere que saques el código de construcción del objeto de su propia clase y lo coloques dentro de
objetos independientes llamados constructores.
Ej: Cuando creamos un objeto Casa, para una casa sencilla debemos construir 4 paredes, 1 piso, 1 puerta, varias ventanas. Pero que pasa si queremos una casa mas
grande con otras cosas extras. Podriamos extender la clase base Casa y crear subclases para cubrir otras necesidades pero acabaremos con una gran cantidad de clases.
El patrón Builder sugiere que saques el código de construcción del objeto de su propia clase y lo coloques dentro de objetos independientes llamados constructores.
Posteriormente organiza la construcción de objetos en una serie de pasos (construirParedes, construirPuerta, etc.). Para crear un objeto, se ejecuta una serie de 
estos pasos en un objeto constructor.
 
Prototype: es un patrón de diseño creacional que nos permite copiar objetos existentes sin que el código dependa de sus clases. Delega el proceso de clonación a los 
propios objetos que están siendo clonados y declara una interfaz común para todos los objetos que soportan la clonación. Esta interfaz nos permite clonar un objeto 
sin acoplar el código a la clase de ese objeto. Normalmente, dicha interfaz contiene un único método clonar.
Ej: Una analogía precisa del patrón es el proceso de la división mitótica de una célula. Tras la división mitótica, se forma un par de células idénticas. 
La célula original actúa como prototipo y asume un papel activo en la creación de la copia.

Decorator: es un patrón de diseño estructural que te permite añadir funcionalidades a objetos colocando estos objetos dentro de objetos encapsuladores especiales 
que contienen estas funcionalidades.
Ej: Una aplicación de notificaciones que permite a otros programas notificar a sus usuarios acerca de eventos importantes. La version inicial de la app permitía
enviar un mensaje a una lista de correos electrónicos. En cierto momento te das cuenta de que los usuarios de la biblioteca esperan algo más que unas simples 
notificaciones por correo. A muchos de ellos les gustaría recibir mensajes SMS sobre asuntos importantes. Otros querrían recibir las notificaciones por Facebook y, 
por supuesto, a los usuarios corporativos les encantaría recibir notificaciones por Slack. Dejemos la sencilla funcionalidad de las notificaciones por correo 
electrónico dentro de la clase base Notificador, pero convirtamos el resto de los métodos de notificación en decoradores. El código cliente debe envolver un objeto
notificador básico dentro de un grupo de decoradores que satisfagan las preferencias del cliente.

Adapter: es un patrón de diseño estructural que permite la colaboración entre objetos con interfaces incompatibles.
Ej: Imagina que estás creando una aplicación de monitoreo del mercado de valores. La aplicación descarga la información de bolsa desde varias fuentes en formato XML
ara presentarla al usuario. Decides mejorar la aplicación integrando una inteligente biblioteca de análisis de una tercera persona. Pero la biblioteca de análisis
solo funciona con datos en formato JSON. Puedes crear un adaptador. Se trata de un objeto especial que convierte la interfaz de un objeto, de forma que otro objeto
pueda comprenderla. Un adaptador envuelve uno de los objetos para esconder la complejidad de la conversión que tiene lugar tras bambalinas. El objeto envuelto ni
siquiera es consciente de la existencia del adaptador. 

Facade: es un patrón de diseño estructural que proporciona una interfaz simplificada a una biblioteca, un framework o cualquier otro grupo complejo de clases.
Imagina que debes lograr que tu código trabaje con un amplio grupo de objetos que pertenecen a una sofisticada biblioteca o framework. Normalmente, debes inicializar
todos esos objetos, llevar un registro de las dependencias, ejecutar los métodos en el orden correcto y así sucesivamente. Una fachada es una clase que proporciona
una interfaz simple a un subsistema complejo que contiene muchas partes móviles. Una fachada puede proporcionar una funcionalidad limitada en comparación con trabajar
directamente con el subsistema.
Tener una fachada resulta útil cuando tienes que integrar tu aplicación con una biblioteca sofisticada con decenas de funciones, de la cual sólo necesitas una
pequeña parte.